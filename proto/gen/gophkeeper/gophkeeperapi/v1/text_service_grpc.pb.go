// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gophkeeper/gophkeeperapi/v1/text_service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TextServiceV1_AddText_FullMethodName    = "/gophkeeper.gophkeeperapi.v1.TextServiceV1/AddText"
	TextServiceV1_DeleteText_FullMethodName = "/gophkeeper.gophkeeperapi.v1.TextServiceV1/DeleteText"
	TextServiceV1_GetTexts_FullMethodName   = "/gophkeeper.gophkeeperapi.v1.TextServiceV1/GetTexts"
)

// TextServiceV1Client is the client API for TextServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextServiceV1Client interface {
	AddText(ctx context.Context, in *AddTextRequestV1, opts ...grpc.CallOption) (*AddTextResponseV1, error)
	DeleteText(ctx context.Context, in *DeleteTextRequestV1, opts ...grpc.CallOption) (*DeleteTextResponseV1, error)
	GetTexts(ctx context.Context, in *GetTextsRequestV1, opts ...grpc.CallOption) (*GetTextsResponseV1, error)
}

type textServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTextServiceV1Client(cc grpc.ClientConnInterface) TextServiceV1Client {
	return &textServiceV1Client{cc}
}

func (c *textServiceV1Client) AddText(ctx context.Context, in *AddTextRequestV1, opts ...grpc.CallOption) (*AddTextResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTextResponseV1)
	err := c.cc.Invoke(ctx, TextServiceV1_AddText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceV1Client) DeleteText(ctx context.Context, in *DeleteTextRequestV1, opts ...grpc.CallOption) (*DeleteTextResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTextResponseV1)
	err := c.cc.Invoke(ctx, TextServiceV1_DeleteText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceV1Client) GetTexts(ctx context.Context, in *GetTextsRequestV1, opts ...grpc.CallOption) (*GetTextsResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextsResponseV1)
	err := c.cc.Invoke(ctx, TextServiceV1_GetTexts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServiceV1Server is the server API for TextServiceV1 service.
// All implementations must embed UnimplementedTextServiceV1Server
// for forward compatibility
type TextServiceV1Server interface {
	AddText(context.Context, *AddTextRequestV1) (*AddTextResponseV1, error)
	DeleteText(context.Context, *DeleteTextRequestV1) (*DeleteTextResponseV1, error)
	GetTexts(context.Context, *GetTextsRequestV1) (*GetTextsResponseV1, error)
	mustEmbedUnimplementedTextServiceV1Server()
}

// UnimplementedTextServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedTextServiceV1Server struct {
}

func (UnimplementedTextServiceV1Server) AddText(context.Context, *AddTextRequestV1) (*AddTextResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedTextServiceV1Server) DeleteText(context.Context, *DeleteTextRequestV1) (*DeleteTextResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteText not implemented")
}
func (UnimplementedTextServiceV1Server) GetTexts(context.Context, *GetTextsRequestV1) (*GetTextsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTexts not implemented")
}
func (UnimplementedTextServiceV1Server) mustEmbedUnimplementedTextServiceV1Server() {}

// UnsafeTextServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServiceV1Server will
// result in compilation errors.
type UnsafeTextServiceV1Server interface {
	mustEmbedUnimplementedTextServiceV1Server()
}

func RegisterTextServiceV1Server(s grpc.ServiceRegistrar, srv TextServiceV1Server) {
	s.RegisterService(&TextServiceV1_ServiceDesc, srv)
}

func _TextServiceV1_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceV1Server).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextServiceV1_AddText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceV1Server).AddText(ctx, req.(*AddTextRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextServiceV1_DeleteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceV1Server).DeleteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextServiceV1_DeleteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceV1Server).DeleteText(ctx, req.(*DeleteTextRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextServiceV1_GetTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceV1Server).GetTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextServiceV1_GetTexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceV1Server).GetTexts(ctx, req.(*GetTextsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// TextServiceV1_ServiceDesc is the grpc.ServiceDesc for TextServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.gophkeeperapi.v1.TextServiceV1",
	HandlerType: (*TextServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddText",
			Handler:    _TextServiceV1_AddText_Handler,
		},
		{
			MethodName: "DeleteText",
			Handler:    _TextServiceV1_DeleteText_Handler,
		},
		{
			MethodName: "GetTexts",
			Handler:    _TextServiceV1_GetTexts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophkeeper/gophkeeperapi/v1/text_service.proto",
}
