// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gophkeeper/gophkeeperapi/v1/account_service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AccountServiceV1_AddAccount_FullMethodName    = "/gophkeeper.gophkeeperapi.v1.AccountServiceV1/AddAccount"
	AccountServiceV1_DeleteAccount_FullMethodName = "/gophkeeper.gophkeeperapi.v1.AccountServiceV1/DeleteAccount"
	AccountServiceV1_GetAccounts_FullMethodName   = "/gophkeeper.gophkeeperapi.v1.AccountServiceV1/GetAccounts"
)

// AccountServiceV1Client is the client API for AccountServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceV1Client interface {
	AddAccount(ctx context.Context, in *AddAccountRequestV1, opts ...grpc.CallOption) (*AddAccountResponseV1, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequestV1, opts ...grpc.CallOption) (*DeleteAccountResponseV1, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequestV1, opts ...grpc.CallOption) (*GetAccountsResponseV1, error)
}

type accountServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceV1Client(cc grpc.ClientConnInterface) AccountServiceV1Client {
	return &accountServiceV1Client{cc}
}

func (c *accountServiceV1Client) AddAccount(ctx context.Context, in *AddAccountRequestV1, opts ...grpc.CallOption) (*AddAccountResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccountResponseV1)
	err := c.cc.Invoke(ctx, AccountServiceV1_AddAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) DeleteAccount(ctx context.Context, in *DeleteAccountRequestV1, opts ...grpc.CallOption) (*DeleteAccountResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponseV1)
	err := c.cc.Invoke(ctx, AccountServiceV1_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) GetAccounts(ctx context.Context, in *GetAccountsRequestV1, opts ...grpc.CallOption) (*GetAccountsResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponseV1)
	err := c.cc.Invoke(ctx, AccountServiceV1_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceV1Server is the server API for AccountServiceV1 service.
// All implementations must embed UnimplementedAccountServiceV1Server
// for forward compatibility
type AccountServiceV1Server interface {
	AddAccount(context.Context, *AddAccountRequestV1) (*AddAccountResponseV1, error)
	DeleteAccount(context.Context, *DeleteAccountRequestV1) (*DeleteAccountResponseV1, error)
	GetAccounts(context.Context, *GetAccountsRequestV1) (*GetAccountsResponseV1, error)
	mustEmbedUnimplementedAccountServiceV1Server()
}

// UnimplementedAccountServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceV1Server struct {
}

func (UnimplementedAccountServiceV1Server) AddAccount(context.Context, *AddAccountRequestV1) (*AddAccountResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAccountServiceV1Server) DeleteAccount(context.Context, *DeleteAccountRequestV1) (*DeleteAccountResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServiceV1Server) GetAccounts(context.Context, *GetAccountsRequestV1) (*GetAccountsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedAccountServiceV1Server) mustEmbedUnimplementedAccountServiceV1Server() {}

// UnsafeAccountServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceV1Server will
// result in compilation errors.
type UnsafeAccountServiceV1Server interface {
	mustEmbedUnimplementedAccountServiceV1Server()
}

func RegisterAccountServiceV1Server(s grpc.ServiceRegistrar, srv AccountServiceV1Server) {
	s.RegisterService(&AccountServiceV1_ServiceDesc, srv)
}

func _AccountServiceV1_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServiceV1_AddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).AddAccount(ctx, req.(*AddAccountRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServiceV1_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).DeleteAccount(ctx, req.(*DeleteAccountRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServiceV1_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).GetAccounts(ctx, req.(*GetAccountsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServiceV1_ServiceDesc is the grpc.ServiceDesc for AccountServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.gophkeeperapi.v1.AccountServiceV1",
	HandlerType: (*AccountServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _AccountServiceV1_AddAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountServiceV1_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _AccountServiceV1_GetAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophkeeper/gophkeeperapi/v1/account_service.proto",
}
