// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/server/card_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/server/card_service.go -destination ./internal/service/server/mock_card_service_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophkeeper/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCardService is a mock of CardService interface.
type MockCardService struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceMockRecorder
}

// MockCardServiceMockRecorder is the mock recorder for MockCardService.
type MockCardServiceMockRecorder struct {
	mock *MockCardService
}

// NewMockCardService creates a new mock instance.
func NewMockCardService(ctrl *gomock.Controller) *MockCardService {
	mock := &MockCardService{ctrl: ctrl}
	mock.recorder = &MockCardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardService) EXPECT() *MockCardServiceMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardService) CreateCard(ctx context.Context, card model.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardServiceMockRecorder) CreateCard(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardService)(nil).CreateCard), ctx, card)
}

// DeleteCard mocks base method.
func (m *MockCardService) DeleteCard(ctx context.Context, userID, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, userID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardServiceMockRecorder) DeleteCard(ctx, userID, cardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardService)(nil).DeleteCard), ctx, userID, cardID)
}

// GetAllCards mocks base method.
func (m *MockCardService) GetAllCards(ctx context.Context, userID string) ([]model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards", ctx, userID)
	ret0, _ := ret[0].([]model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockCardServiceMockRecorder) GetAllCards(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockCardService)(nil).GetAllCards), ctx, userID)
}

// GetCardByID mocks base method.
func (m *MockCardService) GetCardByID(ctx context.Context, userID, cardID string) (model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByID", ctx, userID, cardID)
	ret0, _ := ret[0].(model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByID indicates an expected call of GetCardByID.
func (mr *MockCardServiceMockRecorder) GetCardByID(ctx, userID, cardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByID", reflect.TypeOf((*MockCardService)(nil).GetCardByID), ctx, userID, cardID)
}
