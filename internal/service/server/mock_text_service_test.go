// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/server/text_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/server/text_service.go -destination ./internal/service/server/mock_text_service_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophkeeper/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTextService is a mock of TextService interface.
type MockTextService struct {
	ctrl     *gomock.Controller
	recorder *MockTextServiceMockRecorder
}

// MockTextServiceMockRecorder is the mock recorder for MockTextService.
type MockTextServiceMockRecorder struct {
	mock *MockTextService
}

// NewMockTextService creates a new mock instance.
func NewMockTextService(ctrl *gomock.Controller) *MockTextService {
	mock := &MockTextService{ctrl: ctrl}
	mock.recorder = &MockTextServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextService) EXPECT() *MockTextServiceMockRecorder {
	return m.recorder
}

// CreateText mocks base method.
func (m *MockTextService) CreateText(ctx context.Context, text model.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateText", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateText indicates an expected call of CreateText.
func (mr *MockTextServiceMockRecorder) CreateText(ctx, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateText", reflect.TypeOf((*MockTextService)(nil).CreateText), ctx, text)
}

// DeleteText mocks base method.
func (m *MockTextService) DeleteText(ctx context.Context, userID, textID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", ctx, userID, textID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockTextServiceMockRecorder) DeleteText(ctx, userID, textID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockTextService)(nil).DeleteText), ctx, userID, textID)
}

// GetAllTexts mocks base method.
func (m *MockTextService) GetAllTexts(ctx context.Context, userID string) ([]model.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTexts", ctx, userID)
	ret0, _ := ret[0].([]model.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTexts indicates an expected call of GetAllTexts.
func (mr *MockTextServiceMockRecorder) GetAllTexts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTexts", reflect.TypeOf((*MockTextService)(nil).GetAllTexts), ctx, userID)
}

// GetTextByID mocks base method.
func (m *MockTextService) GetTextByID(ctx context.Context, userID, textID string) (model.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextByID", ctx, userID, textID)
	ret0, _ := ret[0].(model.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextByID indicates an expected call of GetTextByID.
func (mr *MockTextServiceMockRecorder) GetTextByID(ctx, userID, textID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextByID", reflect.TypeOf((*MockTextService)(nil).GetTextByID), ctx, userID, textID)
}
