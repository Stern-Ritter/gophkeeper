// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/server/data_storage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/server/data_storage.go -destination ./internal/service/server/mock_data_storage_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophkeeper/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStorage is a mock of DataStorage interface.
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage.
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance.
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataStorage) Create(ctx context.Context, data model.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataStorageMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataStorage)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockDataStorage) Delete(ctx context.Context, dataID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, dataID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataStorageMockRecorder) Delete(ctx, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataStorage)(nil).Delete), ctx, dataID)
}

// GetAll mocks base method.
func (m *MockDataStorage) GetAll(ctx context.Context, userID string, dataType model.DataType) ([]model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID, dataType)
	ret0, _ := ret[0].([]model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDataStorageMockRecorder) GetAll(ctx, userID, dataType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDataStorage)(nil).GetAll), ctx, userID, dataType)
}

// GetByID mocks base method.
func (m *MockDataStorage) GetByID(ctx context.Context, dataID string) (model.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, dataID)
	ret0, _ := ret[0].(model.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDataStorageMockRecorder) GetByID(ctx, dataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDataStorage)(nil).GetByID), ctx, dataID)
}
