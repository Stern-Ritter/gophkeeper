// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/gen/gophkeeper/gophkeeperapi/v1/card_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./proto/gen/gophkeeper/gophkeeperapi/v1/card_service_grpc.pb.go -destination ./internal/service/client/mock_card_service_grpc.pb_test.go -package client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Stern-Ritter/gophkeeper/proto/gen/gophkeeper/gophkeeperapi/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCardServiceV1Client is a mock of CardServiceV1Client interface.
type MockCardServiceV1Client struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceV1ClientMockRecorder
}

// MockCardServiceV1ClientMockRecorder is the mock recorder for MockCardServiceV1Client.
type MockCardServiceV1ClientMockRecorder struct {
	mock *MockCardServiceV1Client
}

// NewMockCardServiceV1Client creates a new mock instance.
func NewMockCardServiceV1Client(ctrl *gomock.Controller) *MockCardServiceV1Client {
	mock := &MockCardServiceV1Client{ctrl: ctrl}
	mock.recorder = &MockCardServiceV1ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardServiceV1Client) EXPECT() *MockCardServiceV1ClientMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockCardServiceV1Client) AddCard(ctx context.Context, in *v1.AddCardRequestV1, opts ...grpc.CallOption) (*v1.AddCardResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCard", varargs...)
	ret0, _ := ret[0].(*v1.AddCardResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockCardServiceV1ClientMockRecorder) AddCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockCardServiceV1Client)(nil).AddCard), varargs...)
}

// DeleteCard mocks base method.
func (m *MockCardServiceV1Client) DeleteCard(ctx context.Context, in *v1.DeleteCardRequestV1, opts ...grpc.CallOption) (*v1.DeleteCardResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCard", varargs...)
	ret0, _ := ret[0].(*v1.DeleteCardResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardServiceV1ClientMockRecorder) DeleteCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardServiceV1Client)(nil).DeleteCard), varargs...)
}

// GetCards mocks base method.
func (m *MockCardServiceV1Client) GetCards(ctx context.Context, in *v1.GetCardsRequestV1, opts ...grpc.CallOption) (*v1.GetCardsResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCards", varargs...)
	ret0, _ := ret[0].(*v1.GetCardsResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockCardServiceV1ClientMockRecorder) GetCards(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockCardServiceV1Client)(nil).GetCards), varargs...)
}

// MockCardServiceV1Server is a mock of CardServiceV1Server interface.
type MockCardServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceV1ServerMockRecorder
}

// MockCardServiceV1ServerMockRecorder is the mock recorder for MockCardServiceV1Server.
type MockCardServiceV1ServerMockRecorder struct {
	mock *MockCardServiceV1Server
}

// NewMockCardServiceV1Server creates a new mock instance.
func NewMockCardServiceV1Server(ctrl *gomock.Controller) *MockCardServiceV1Server {
	mock := &MockCardServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockCardServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardServiceV1Server) EXPECT() *MockCardServiceV1ServerMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockCardServiceV1Server) AddCard(arg0 context.Context, arg1 *v1.AddCardRequestV1) (*v1.AddCardResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddCardResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockCardServiceV1ServerMockRecorder) AddCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockCardServiceV1Server)(nil).AddCard), arg0, arg1)
}

// DeleteCard mocks base method.
func (m *MockCardServiceV1Server) DeleteCard(arg0 context.Context, arg1 *v1.DeleteCardRequestV1) (*v1.DeleteCardResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteCardResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardServiceV1ServerMockRecorder) DeleteCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardServiceV1Server)(nil).DeleteCard), arg0, arg1)
}

// GetCards mocks base method.
func (m *MockCardServiceV1Server) GetCards(arg0 context.Context, arg1 *v1.GetCardsRequestV1) (*v1.GetCardsResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetCardsResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockCardServiceV1ServerMockRecorder) GetCards(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockCardServiceV1Server)(nil).GetCards), arg0, arg1)
}

// mustEmbedUnimplementedCardServiceV1Server mocks base method.
func (m *MockCardServiceV1Server) mustEmbedUnimplementedCardServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCardServiceV1Server")
}

// mustEmbedUnimplementedCardServiceV1Server indicates an expected call of mustEmbedUnimplementedCardServiceV1Server.
func (mr *MockCardServiceV1ServerMockRecorder) mustEmbedUnimplementedCardServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCardServiceV1Server", reflect.TypeOf((*MockCardServiceV1Server)(nil).mustEmbedUnimplementedCardServiceV1Server))
}

// MockUnsafeCardServiceV1Server is a mock of UnsafeCardServiceV1Server interface.
type MockUnsafeCardServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCardServiceV1ServerMockRecorder
}

// MockUnsafeCardServiceV1ServerMockRecorder is the mock recorder for MockUnsafeCardServiceV1Server.
type MockUnsafeCardServiceV1ServerMockRecorder struct {
	mock *MockUnsafeCardServiceV1Server
}

// NewMockUnsafeCardServiceV1Server creates a new mock instance.
func NewMockUnsafeCardServiceV1Server(ctrl *gomock.Controller) *MockUnsafeCardServiceV1Server {
	mock := &MockUnsafeCardServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeCardServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCardServiceV1Server) EXPECT() *MockUnsafeCardServiceV1ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCardServiceV1Server mocks base method.
func (m *MockUnsafeCardServiceV1Server) mustEmbedUnimplementedCardServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCardServiceV1Server")
}

// mustEmbedUnimplementedCardServiceV1Server indicates an expected call of mustEmbedUnimplementedCardServiceV1Server.
func (mr *MockUnsafeCardServiceV1ServerMockRecorder) mustEmbedUnimplementedCardServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCardServiceV1Server", reflect.TypeOf((*MockUnsafeCardServiceV1Server)(nil).mustEmbedUnimplementedCardServiceV1Server))
}
