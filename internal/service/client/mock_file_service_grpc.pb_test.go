// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/gen/gophkeeper/gophkeeperapi/v1/file_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./proto/gen/gophkeeper/gophkeeperapi/v1/file_service_grpc.pb.go -destination ./internal/service/client/mock_file_service_grpc.pb_test.go -package client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Stern-Ritter/gophkeeper/proto/gen/gophkeeper/gophkeeperapi/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockFileServiceV1Client is a mock of FileServiceV1Client interface.
type MockFileServiceV1Client struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1ClientMockRecorder
}

// MockFileServiceV1ClientMockRecorder is the mock recorder for MockFileServiceV1Client.
type MockFileServiceV1ClientMockRecorder struct {
	mock *MockFileServiceV1Client
}

// NewMockFileServiceV1Client creates a new mock instance.
func NewMockFileServiceV1Client(ctrl *gomock.Controller) *MockFileServiceV1Client {
	mock := &MockFileServiceV1Client{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1Client) EXPECT() *MockFileServiceV1ClientMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServiceV1Client) DeleteFile(ctx context.Context, in *v1.DeleteFileRequestV1, opts ...grpc.CallOption) (*v1.DeleteFileResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*v1.DeleteFileResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceV1ClientMockRecorder) DeleteFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServiceV1Client)(nil).DeleteFile), varargs...)
}

// DownloadFile mocks base method.
func (m *MockFileServiceV1Client) DownloadFile(ctx context.Context, in *v1.DownloadFileRequestV1, opts ...grpc.CallOption) (v1.FileServiceV1_DownloadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(v1.FileServiceV1_DownloadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileServiceV1ClientMockRecorder) DownloadFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileServiceV1Client)(nil).DownloadFile), varargs...)
}

// GetFiles mocks base method.
func (m *MockFileServiceV1Client) GetFiles(ctx context.Context, in *v1.GetFilesRequestV1, opts ...grpc.CallOption) (*v1.GetFilesResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFiles", varargs...)
	ret0, _ := ret[0].(*v1.GetFilesResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockFileServiceV1ClientMockRecorder) GetFiles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFileServiceV1Client)(nil).GetFiles), varargs...)
}

// UploadFile mocks base method.
func (m *MockFileServiceV1Client) UploadFile(ctx context.Context, opts ...grpc.CallOption) (v1.FileServiceV1_UploadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(v1.FileServiceV1_UploadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceV1ClientMockRecorder) UploadFile(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileServiceV1Client)(nil).UploadFile), varargs...)
}

// MockFileServiceV1_UploadFileClient is a mock of FileServiceV1_UploadFileClient interface.
type MockFileServiceV1_UploadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1_UploadFileClientMockRecorder
}

// MockFileServiceV1_UploadFileClientMockRecorder is the mock recorder for MockFileServiceV1_UploadFileClient.
type MockFileServiceV1_UploadFileClientMockRecorder struct {
	mock *MockFileServiceV1_UploadFileClient
}

// NewMockFileServiceV1_UploadFileClient creates a new mock instance.
func NewMockFileServiceV1_UploadFileClient(ctrl *gomock.Controller) *MockFileServiceV1_UploadFileClient {
	mock := &MockFileServiceV1_UploadFileClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1_UploadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1_UploadFileClient) EXPECT() *MockFileServiceV1_UploadFileClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockFileServiceV1_UploadFileClient) CloseAndRecv() (*v1.UploadFileResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v1.UploadFileResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockFileServiceV1_UploadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFileServiceV1_UploadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFileServiceV1_UploadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockFileServiceV1_UploadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFileServiceV1_UploadFileClient) Send(arg0 *v1.UploadFileRequestV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileServiceV1_UploadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFileServiceV1_UploadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFileServiceV1_UploadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFileServiceV1_UploadFileClient)(nil).Trailer))
}

// MockFileServiceV1_DownloadFileClient is a mock of FileServiceV1_DownloadFileClient interface.
type MockFileServiceV1_DownloadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1_DownloadFileClientMockRecorder
}

// MockFileServiceV1_DownloadFileClientMockRecorder is the mock recorder for MockFileServiceV1_DownloadFileClient.
type MockFileServiceV1_DownloadFileClientMockRecorder struct {
	mock *MockFileServiceV1_DownloadFileClient
}

// NewMockFileServiceV1_DownloadFileClient creates a new mock instance.
func NewMockFileServiceV1_DownloadFileClient(ctrl *gomock.Controller) *MockFileServiceV1_DownloadFileClient {
	mock := &MockFileServiceV1_DownloadFileClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1_DownloadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1_DownloadFileClient) EXPECT() *MockFileServiceV1_DownloadFileClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFileServiceV1_DownloadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFileServiceV1_DownloadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFileServiceV1_DownloadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFileServiceV1_DownloadFileClient) Recv() (*v1.DownloadFileResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.DownloadFileResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFileServiceV1_DownloadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFileServiceV1_DownloadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFileServiceV1_DownloadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFileServiceV1_DownloadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFileServiceV1_DownloadFileClient)(nil).Trailer))
}

// MockFileServiceV1Server is a mock of FileServiceV1Server interface.
type MockFileServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1ServerMockRecorder
}

// MockFileServiceV1ServerMockRecorder is the mock recorder for MockFileServiceV1Server.
type MockFileServiceV1ServerMockRecorder struct {
	mock *MockFileServiceV1Server
}

// NewMockFileServiceV1Server creates a new mock instance.
func NewMockFileServiceV1Server(ctrl *gomock.Controller) *MockFileServiceV1Server {
	mock := &MockFileServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1Server) EXPECT() *MockFileServiceV1ServerMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServiceV1Server) DeleteFile(arg0 context.Context, arg1 *v1.DeleteFileRequestV1) (*v1.DeleteFileResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteFileResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceV1ServerMockRecorder) DeleteFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServiceV1Server)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockFileServiceV1Server) DownloadFile(arg0 *v1.DownloadFileRequestV1, arg1 v1.FileServiceV1_DownloadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileServiceV1ServerMockRecorder) DownloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileServiceV1Server)(nil).DownloadFile), arg0, arg1)
}

// GetFiles mocks base method.
func (m *MockFileServiceV1Server) GetFiles(arg0 context.Context, arg1 *v1.GetFilesRequestV1) (*v1.GetFilesResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetFilesResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockFileServiceV1ServerMockRecorder) GetFiles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFileServiceV1Server)(nil).GetFiles), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockFileServiceV1Server) UploadFile(arg0 v1.FileServiceV1_UploadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceV1ServerMockRecorder) UploadFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileServiceV1Server)(nil).UploadFile), arg0)
}

// mustEmbedUnimplementedFileServiceV1Server mocks base method.
func (m *MockFileServiceV1Server) mustEmbedUnimplementedFileServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceV1Server")
}

// mustEmbedUnimplementedFileServiceV1Server indicates an expected call of mustEmbedUnimplementedFileServiceV1Server.
func (mr *MockFileServiceV1ServerMockRecorder) mustEmbedUnimplementedFileServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceV1Server", reflect.TypeOf((*MockFileServiceV1Server)(nil).mustEmbedUnimplementedFileServiceV1Server))
}

// MockUnsafeFileServiceV1Server is a mock of UnsafeFileServiceV1Server interface.
type MockUnsafeFileServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileServiceV1ServerMockRecorder
}

// MockUnsafeFileServiceV1ServerMockRecorder is the mock recorder for MockUnsafeFileServiceV1Server.
type MockUnsafeFileServiceV1ServerMockRecorder struct {
	mock *MockUnsafeFileServiceV1Server
}

// NewMockUnsafeFileServiceV1Server creates a new mock instance.
func NewMockUnsafeFileServiceV1Server(ctrl *gomock.Controller) *MockUnsafeFileServiceV1Server {
	mock := &MockUnsafeFileServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileServiceV1Server) EXPECT() *MockUnsafeFileServiceV1ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileServiceV1Server mocks base method.
func (m *MockUnsafeFileServiceV1Server) mustEmbedUnimplementedFileServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceV1Server")
}

// mustEmbedUnimplementedFileServiceV1Server indicates an expected call of mustEmbedUnimplementedFileServiceV1Server.
func (mr *MockUnsafeFileServiceV1ServerMockRecorder) mustEmbedUnimplementedFileServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceV1Server", reflect.TypeOf((*MockUnsafeFileServiceV1Server)(nil).mustEmbedUnimplementedFileServiceV1Server))
}

// MockFileServiceV1_UploadFileServer is a mock of FileServiceV1_UploadFileServer interface.
type MockFileServiceV1_UploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1_UploadFileServerMockRecorder
}

// MockFileServiceV1_UploadFileServerMockRecorder is the mock recorder for MockFileServiceV1_UploadFileServer.
type MockFileServiceV1_UploadFileServerMockRecorder struct {
	mock *MockFileServiceV1_UploadFileServer
}

// NewMockFileServiceV1_UploadFileServer creates a new mock instance.
func NewMockFileServiceV1_UploadFileServer(ctrl *gomock.Controller) *MockFileServiceV1_UploadFileServer {
	mock := &MockFileServiceV1_UploadFileServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1_UploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1_UploadFileServer) EXPECT() *MockFileServiceV1_UploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFileServiceV1_UploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockFileServiceV1_UploadFileServer) Recv() (*v1.UploadFileRequestV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.UploadFileRequestV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFileServiceV1_UploadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockFileServiceV1_UploadFileServer) SendAndClose(arg0 *v1.UploadFileResponseV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) SendAndClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockFileServiceV1_UploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileServiceV1_UploadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFileServiceV1_UploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFileServiceV1_UploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFileServiceV1_UploadFileServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFileServiceV1_UploadFileServer)(nil).SetTrailer), arg0)
}

// MockFileServiceV1_DownloadFileServer is a mock of FileServiceV1_DownloadFileServer interface.
type MockFileServiceV1_DownloadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceV1_DownloadFileServerMockRecorder
}

// MockFileServiceV1_DownloadFileServerMockRecorder is the mock recorder for MockFileServiceV1_DownloadFileServer.
type MockFileServiceV1_DownloadFileServerMockRecorder struct {
	mock *MockFileServiceV1_DownloadFileServer
}

// NewMockFileServiceV1_DownloadFileServer creates a new mock instance.
func NewMockFileServiceV1_DownloadFileServer(ctrl *gomock.Controller) *MockFileServiceV1_DownloadFileServer {
	mock := &MockFileServiceV1_DownloadFileServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceV1_DownloadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceV1_DownloadFileServer) EXPECT() *MockFileServiceV1_DownloadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFileServiceV1_DownloadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFileServiceV1_DownloadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFileServiceV1_DownloadFileServer) Send(arg0 *v1.DownloadFileResponseV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFileServiceV1_DownloadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFileServiceV1_DownloadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFileServiceV1_DownloadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFileServiceV1_DownloadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFileServiceV1_DownloadFileServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFileServiceV1_DownloadFileServer)(nil).SetTrailer), arg0)
}
