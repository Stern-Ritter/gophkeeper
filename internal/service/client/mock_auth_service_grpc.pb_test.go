// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/gen/gophkeeper/gophkeeperapi/v1/auth_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./proto/gen/gophkeeper/gophkeeperapi/v1/auth_service_grpc.pb.go -destination ./internal/service/client/mock_auth_service_grpc.pb_test.go -package client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Stern-Ritter/gophkeeper/proto/gen/gophkeeper/gophkeeperapi/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceV1Client is a mock of AuthServiceV1Client interface.
type MockAuthServiceV1Client struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceV1ClientMockRecorder
}

// MockAuthServiceV1ClientMockRecorder is the mock recorder for MockAuthServiceV1Client.
type MockAuthServiceV1ClientMockRecorder struct {
	mock *MockAuthServiceV1Client
}

// NewMockAuthServiceV1Client creates a new mock instance.
func NewMockAuthServiceV1Client(ctrl *gomock.Controller) *MockAuthServiceV1Client {
	mock := &MockAuthServiceV1Client{ctrl: ctrl}
	mock.recorder = &MockAuthServiceV1ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceV1Client) EXPECT() *MockAuthServiceV1ClientMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthServiceV1Client) SignIn(ctx context.Context, in *v1.SignInRequestV1, opts ...grpc.CallOption) (*v1.SignInResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*v1.SignInResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceV1ClientMockRecorder) SignIn(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthServiceV1Client)(nil).SignIn), varargs...)
}

// SignUp mocks base method.
func (m *MockAuthServiceV1Client) SignUp(ctx context.Context, in *v1.SignUpRequestV1, opts ...grpc.CallOption) (*v1.SignUpResponseV1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*v1.SignUpResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceV1ClientMockRecorder) SignUp(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthServiceV1Client)(nil).SignUp), varargs...)
}

// MockAuthServiceV1Server is a mock of AuthServiceV1Server interface.
type MockAuthServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceV1ServerMockRecorder
}

// MockAuthServiceV1ServerMockRecorder is the mock recorder for MockAuthServiceV1Server.
type MockAuthServiceV1ServerMockRecorder struct {
	mock *MockAuthServiceV1Server
}

// NewMockAuthServiceV1Server creates a new mock instance.
func NewMockAuthServiceV1Server(ctrl *gomock.Controller) *MockAuthServiceV1Server {
	mock := &MockAuthServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockAuthServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceV1Server) EXPECT() *MockAuthServiceV1ServerMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthServiceV1Server) SignIn(arg0 context.Context, arg1 *v1.SignInRequestV1) (*v1.SignInResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*v1.SignInResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceV1ServerMockRecorder) SignIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthServiceV1Server)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockAuthServiceV1Server) SignUp(arg0 context.Context, arg1 *v1.SignUpRequestV1) (*v1.SignUpResponseV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*v1.SignUpResponseV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceV1ServerMockRecorder) SignUp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthServiceV1Server)(nil).SignUp), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceV1Server mocks base method.
func (m *MockAuthServiceV1Server) mustEmbedUnimplementedAuthServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceV1Server")
}

// mustEmbedUnimplementedAuthServiceV1Server indicates an expected call of mustEmbedUnimplementedAuthServiceV1Server.
func (mr *MockAuthServiceV1ServerMockRecorder) mustEmbedUnimplementedAuthServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceV1Server", reflect.TypeOf((*MockAuthServiceV1Server)(nil).mustEmbedUnimplementedAuthServiceV1Server))
}

// MockUnsafeAuthServiceV1Server is a mock of UnsafeAuthServiceV1Server interface.
type MockUnsafeAuthServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceV1ServerMockRecorder
}

// MockUnsafeAuthServiceV1ServerMockRecorder is the mock recorder for MockUnsafeAuthServiceV1Server.
type MockUnsafeAuthServiceV1ServerMockRecorder struct {
	mock *MockUnsafeAuthServiceV1Server
}

// NewMockUnsafeAuthServiceV1Server creates a new mock instance.
func NewMockUnsafeAuthServiceV1Server(ctrl *gomock.Controller) *MockUnsafeAuthServiceV1Server {
	mock := &MockUnsafeAuthServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceV1Server) EXPECT() *MockUnsafeAuthServiceV1ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceV1Server mocks base method.
func (m *MockUnsafeAuthServiceV1Server) mustEmbedUnimplementedAuthServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceV1Server")
}

// mustEmbedUnimplementedAuthServiceV1Server indicates an expected call of mustEmbedUnimplementedAuthServiceV1Server.
func (mr *MockUnsafeAuthServiceV1ServerMockRecorder) mustEmbedUnimplementedAuthServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceV1Server", reflect.TypeOf((*MockUnsafeAuthServiceV1Server)(nil).mustEmbedUnimplementedAuthServiceV1Server))
}
