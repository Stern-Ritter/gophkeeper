// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/client/file_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/client/file_service.go -destination ./internal/service/client/mock_file_service_test.go -package client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Stern-Ritter/gophkeeper/proto/gen/gophkeeper/gophkeeperapi/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileService) DeleteFile(fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceMockRecorder) DeleteFile(fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileService)(nil).DeleteFile), fileID)
}

// DownloadFile mocks base method.
func (m *MockFileService) DownloadFile(ctx context.Context, fileID, dirPath string, progressFunc func(float64)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, fileID, dirPath, progressFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileServiceMockRecorder) DownloadFile(ctx, fileID, dirPath, progressFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileService)(nil).DownloadFile), ctx, fileID, dirPath, progressFunc)
}

// GetAllFiles mocks base method.
func (m *MockFileService) GetAllFiles() ([]*v1.FileV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFiles")
	ret0, _ := ret[0].([]*v1.FileV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFiles indicates an expected call of GetAllFiles.
func (mr *MockFileServiceMockRecorder) GetAllFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFiles", reflect.TypeOf((*MockFileService)(nil).GetAllFiles))
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, filePath, comment string, progressFunc func(float64)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, filePath, comment, progressFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, filePath, comment, progressFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, filePath, comment, progressFunc)
}
