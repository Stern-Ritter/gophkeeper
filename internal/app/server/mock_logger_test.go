// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/logger/server/logger.go
//
// Generated by this command:
//
//	mockgen -source=./internal/logger/server/logger.go -destination ./internal/app/server/mock_logger_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
	zapcore "go.uber.org/zap/zapcore"
)

// MockServerLogger is a mock of ServerLogger interface.
type MockServerLogger struct {
	ctrl     *gomock.Controller
	recorder *MockServerLoggerMockRecorder
}

// MockServerLoggerMockRecorder is the mock recorder for MockServerLogger.
type MockServerLoggerMockRecorder struct {
	mock *MockServerLogger
}

// NewMockServerLogger creates a new mock instance.
func NewMockServerLogger(ctrl *gomock.Controller) *MockServerLogger {
	mock := &MockServerLogger{ctrl: ctrl}
	mock.recorder = &MockServerLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerLogger) EXPECT() *MockServerLoggerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockServerLogger) Check(lvl zapcore.Level, msg string) *zapcore.CheckedEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", lvl, msg)
	ret0, _ := ret[0].(*zapcore.CheckedEntry)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockServerLoggerMockRecorder) Check(lvl, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockServerLogger)(nil).Check), lvl, msg)
}

// Core mocks base method.
func (m *MockServerLogger) Core() zapcore.Core {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Core")
	ret0, _ := ret[0].(zapcore.Core)
	return ret0
}

// Core indicates an expected call of Core.
func (mr *MockServerLoggerMockRecorder) Core() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Core", reflect.TypeOf((*MockServerLogger)(nil).Core))
}

// DPanic mocks base method.
func (m *MockServerLogger) DPanic(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanic", varargs...)
}

// DPanic indicates an expected call of DPanic.
func (mr *MockServerLoggerMockRecorder) DPanic(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanic", reflect.TypeOf((*MockServerLogger)(nil).DPanic), varargs...)
}

// Debug mocks base method.
func (m *MockServerLogger) Debug(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockServerLoggerMockRecorder) Debug(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockServerLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockServerLogger) Error(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockServerLoggerMockRecorder) Error(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockServerLogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockServerLogger) Fatal(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockServerLoggerMockRecorder) Fatal(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockServerLogger)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockServerLogger) Info(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockServerLoggerMockRecorder) Info(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServerLogger)(nil).Info), varargs...)
}

// Level mocks base method.
func (m *MockServerLogger) Level() zapcore.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(zapcore.Level)
	return ret0
}

// Level indicates an expected call of Level.
func (mr *MockServerLoggerMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockServerLogger)(nil).Level))
}

// Log mocks base method.
func (m *MockServerLogger) Log(lvl zapcore.Level, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{lvl, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockServerLoggerMockRecorder) Log(lvl, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{lvl, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockServerLogger)(nil).Log), varargs...)
}

// Name mocks base method.
func (m *MockServerLogger) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServerLoggerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServerLogger)(nil).Name))
}

// Named mocks base method.
func (m *MockServerLogger) Named(s string) *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Named", s)
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Named indicates an expected call of Named.
func (mr *MockServerLoggerMockRecorder) Named(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*MockServerLogger)(nil).Named), s)
}

// Panic mocks base method.
func (m *MockServerLogger) Panic(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockServerLoggerMockRecorder) Panic(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockServerLogger)(nil).Panic), varargs...)
}

// Sugar mocks base method.
func (m *MockServerLogger) Sugar() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sugar")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// Sugar indicates an expected call of Sugar.
func (mr *MockServerLoggerMockRecorder) Sugar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sugar", reflect.TypeOf((*MockServerLogger)(nil).Sugar))
}

// Sync mocks base method.
func (m *MockServerLogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockServerLoggerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockServerLogger)(nil).Sync))
}

// Warn mocks base method.
func (m *MockServerLogger) Warn(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockServerLoggerMockRecorder) Warn(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockServerLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockServerLogger) With(fields ...zap.Field) *zap.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockServerLoggerMockRecorder) With(fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockServerLogger)(nil).With), fields...)
}

// WithLazy mocks base method.
func (m *MockServerLogger) WithLazy(fields ...zap.Field) *zap.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLazy", varargs...)
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// WithLazy indicates an expected call of WithLazy.
func (mr *MockServerLoggerMockRecorder) WithLazy(fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLazy", reflect.TypeOf((*MockServerLogger)(nil).WithLazy), fields...)
}

// WithOptions mocks base method.
func (m *MockServerLogger) WithOptions(opts ...zap.Option) *zap.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOptions", varargs...)
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockServerLoggerMockRecorder) WithOptions(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockServerLogger)(nil).WithOptions), opts...)
}
